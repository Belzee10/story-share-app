{"version":3,"sources":["FormValidator.js"],"names":["FormValidator","constructor","validations","validate","state","validation","valid","forEach","rule","field","isInvalid","field_value","toString","args","validation_method","method","validator","validWhen","message","isValid","map"],"mappings":";;;;;;;;;;;AAAA;;AAEA,MAAMA,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACvB,SAAKA,WAAL,GAAmBA,WAAnB;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,QAAIC,UAAU,GAAG,KAAKC,KAAL,EAAjB;AACA,SAAKJ,WAAL,CAAiBK,OAAjB,CAAyBC,IAAI,IAAI;AAC/B,UAAI,CAACH,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,CAAuBC,SAA5B,EAAuC;AACrC,cAAMC,WAAW,GAAGP,KAAK,CAACI,IAAI,CAACC,KAAN,CAAL,CAAkBG,QAAlB,EAApB;AACA,cAAMC,IAAI,GAAGL,IAAI,CAACK,IAAL,IAAa,EAA1B;AACA,cAAMC,iBAAiB,GACrB,OAAON,IAAI,CAACO,MAAZ,KAAuB,QAAvB,GACIC,mBAAUR,IAAI,CAACO,MAAf,CADJ,GAEIP,IAAI,CAACO,MAHX;;AAKA,YAAID,iBAAiB,CAACH,WAAD,EAAc,GAAGE,IAAjB,EAAuBT,KAAvB,CAAjB,KAAmDI,IAAI,CAACS,SAA5D,EAAuE;AACrEZ,UAAAA,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,GAAyB;AAAEC,YAAAA,SAAS,EAAE,IAAb;AAAmBQ,YAAAA,OAAO,EAAEV,IAAI,CAACU;AAAjC,WAAzB;AACAb,UAAAA,UAAU,CAACc,OAAX,GAAqB,KAArB;AACD;AACF;AACF,KAdD;AAeA,WAAOd,UAAP;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,UAAMD,UAAU,GAAG,EAAnB;AACA,SAAKH,WAAL,CAAiBkB,GAAjB,CACEZ,IAAI,IAAKH,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,GAAyB;AAAEC,MAAAA,SAAS,EAAE,KAAb;AAAoBQ,MAAAA,OAAO,EAAE;AAA7B,KADpC;AAGA;AAASC,MAAAA,OAAO,EAAE;AAAlB,OAA2Bd,UAA3B;AACD;;AA/BiB;;eAkCLL,a","sourcesContent":["import validator from \"validator\";\n\nclass FormValidator {\n  constructor(validations) {\n    this.validations = validations;\n  }\n\n  validate(state) {\n    let validation = this.valid();\n    this.validations.forEach(rule => {\n      if (!validation[rule.field].isInvalid) {\n        const field_value = state[rule.field].toString();\n        const args = rule.args || [];\n        const validation_method =\n          typeof rule.method === \"string\"\n            ? validator[rule.method]\n            : rule.method;\n\n        if (validation_method(field_value, ...args, state) !== rule.validWhen) {\n          validation[rule.field] = { isInvalid: true, message: rule.message };\n          validation.isValid = false;\n        }\n      }\n    });\n    return validation;\n  }\n\n  valid() {\n    const validation = {};\n    this.validations.map(\n      rule => (validation[rule.field] = { isInvalid: false, message: \"\" })\n    );\n    return { isValid: true, ...validation };\n  }\n}\n\nexport default FormValidator;\n"]}