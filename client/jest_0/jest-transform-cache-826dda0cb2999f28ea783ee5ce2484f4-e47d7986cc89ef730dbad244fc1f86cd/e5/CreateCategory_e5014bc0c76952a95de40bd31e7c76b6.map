{"version":3,"sources":["CreateCategory.jsx"],"names":["CreateCategory","Component","constructor","props","validator","FormValidator","field","method","validWhen","message","state","name","validation","valid","showAlert","submitted","timer","onChange","bind","onSubmit","afterSubmit","handleTimeOut","componentWillUnmount","clearTimeout","e","setState","target","value","preventDefault","validate","isValid","category","createCategory","setTimeout","prevState","render","isInvalid","propTypes","PropTypes","func","isRequired","mapStateToProps","categories"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createCategory } from \"../../../actions/categoryActions\";\nimport PropTypes from \"prop-types\";\nimport FormValidator from \"../../../utiles/FormValidator\";\n\nimport Button from \"../../../components/common/Button\";\nimport InvalidFeedback from \"../../../components/common/InvalidFeedback\";\nimport Alert from \"../../../components/common//Alert\";\n\nclass CreateCategory extends Component {\n  constructor(props) {\n    super(props);\n    this.validator = new FormValidator([\n      {\n        field: \"name\",\n        method: \"isEmpty\",\n        validWhen: false,\n        message: \"Name is required.\"\n      }\n    ]);\n    this.state = {\n      name: \"\",\n      validation: this.validator.valid(),\n      showAlert: false\n    };\n    this.submitted = false;\n    this.timer = null;\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.afterSubmit = this.afterSubmit.bind(this);\n    this.handleTimeOut = this.handleTimeOut.bind(this);\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const validation = this.validator.validate(this.state);\n    this.setState({ validation });\n    this.submitted = true;\n    if (validation.isValid) {\n      const category = {\n        name: this.state.name\n      };\n      this.props.createCategory(category);\n      this.afterSubmit();\n      this.submitted = false;\n    }\n  }\n\n  handleTimeOut() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n    this.timer = setTimeout(() => {\n      this.setState({\n        showAlert: false\n      });\n    }, 2000);\n  }\n\n  afterSubmit() {\n    this.setState(\n      prevState => {\n        return { showAlert: (prevState.showAlert = true), name: \"\" };\n      },\n      () => {\n        this.handleTimeOut();\n      }\n    );\n  }\n\n  render() {\n    const { name, showAlert } = this.state;\n    let validation = this.submitted\n      ? this.validator.validate(this.state)\n      : this.state.validation;\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit}>\n                  <h2 className=\"mb-3\">Create Category</h2>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name:</label>\n                    <input\n                      value={name}\n                      onChange={this.onChange}\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      className={`form-control ${validation.name.isInvalid &&\n                        \"is-invalid\"}`}\n                    />\n                    <InvalidFeedback>{validation.name.message}</InvalidFeedback>\n                  </div>\n                  <div className=\"form-group\">\n                    <Button\n                      disabled={!validation.isValid && true}\n                      buttonClass=\"btn-primary\"\n                      buttonType=\"submit\"\n                    >\n                      Create\n                    </Button>{\" \"}\n                    <Button\n                      buttonUrl=\"/admin/categories\"\n                      buttonClass=\"btn-secondary\"\n                      buttonType=\"link\"\n                    >\n                      Go back\n                    </Button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6\">\n            {showAlert && (\n              <Alert alertType=\"success\">Category created successfuly!</Alert>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nCreateCategory.propTypes = {\n  createCategory: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  message: state.categories.message\n});\n\nexport default connect(\n  mapStateToProps,\n  { createCategory }\n)(CreateCategory);\n"]}