{"version":3,"sources":["CreateUser.jsx"],"names":["CreateUser","Component","constructor","props","validator","FormValidator","field","method","validWhen","message","args","min","state","fullName","avatar","email","password","role","validation","valid","submitted","onChange","bind","onSubmit","afterSubmit","e","setState","target","name","value","prevState","preventDefault","validate","isValid","user","createUser","render","isInvalid","propTypes","PropTypes","func","isRequired","mapStateToProps","users"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createUser } from \"../../../actions/userActions\";\nimport PropTypes from \"prop-types\";\nimport FormValidator from \"../../../utiles/FormValidator\";\n\nimport Button from \"../../../components/common/Button\";\nimport InvalidFeedback from \"../../../components/common/InvalidFeedback\";\n\nclass CreateUser extends Component {\n  constructor(props) {\n    super(props);\n    this.validator = new FormValidator([\n      {\n        field: \"fullName\",\n        method: \"isEmpty\",\n        validWhen: false,\n        message: \"Full Name is required.\"\n      },\n      {\n        field: \"email\",\n        method: \"isEmpty\",\n        validWhen: false,\n        message: \"Email is required.\"\n      },\n      {\n        field: \"email\",\n        method: \"isEmail\",\n        validWhen: true,\n        message: \"This is not a valid email.\"\n      },\n      {\n        field: \"password\",\n        method: \"isEmpty\",\n        validWhen: false,\n        message: \"Password is required.\"\n      },\n      {\n        field: \"password\",\n        method: \"isLength\",\n        args: [{ min: 3 }],\n        validWhen: true,\n        message: \"Password should have more than 3 characters.\"\n      },\n      {\n        field: \"role\",\n        method: \"isEmpty\",\n        validWhen: false,\n        message: \"Role is required.\"\n      }\n    ]);\n    this.state = {\n      fullName: \"\",\n      avatar: \"avatar.png\",\n      email: \"\",\n      password: \"\",\n      role: \"\",\n      validation: this.validator.valid()\n    };\n    this.submitted = false;\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.afterSubmit = this.afterSubmit.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  afterSubmit() {\n    this.setState(prevState => {\n      return {\n        fullName: \"\",\n        email: \"\",\n        password: \"\",\n        role: \"\"\n      };\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const validation = this.validator.validate(this.state);\n    this.setState({ validation });\n    this.submitted = true;\n    if (validation.isValid) {\n      const user = {\n        fullName: this.state.fullName,\n        avatar: this.state.avatar,\n        email: this.state.email,\n        password: this.state.password,\n        role: this.state.role\n      };\n      this.props.createUser(user);\n      this.afterSubmit();\n      this.submitted = false;\n    }\n  }\n\n  render() {\n    const { fullName, email, password, role } = this.state;\n    let validation = this.submitted\n      ? this.validator.validate(this.state)\n      : this.state.validation;\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit}>\n                  <h2 className=\"mb-3\">Create User</h2>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"fullName\">Full Name:</label>\n                    <input\n                      value={fullName}\n                      onChange={this.onChange}\n                      type=\"text\"\n                      id=\"fullName\"\n                      name=\"fullName\"\n                      className={`form-control ${validation.fullName\n                        .isInvalid && \"is-invalid\"}`}\n                    />\n                    <InvalidFeedback>\n                      {validation.fullName.message}\n                    </InvalidFeedback>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label htmlFor=\"email\">Email:</label>\n                    <input\n                      value={email}\n                      onChange={this.onChange}\n                      type=\"email\"\n                      id=\"email\"\n                      name=\"email\"\n                      className={`form-control ${validation.email.isInvalid &&\n                        \"is-invalid\"}`}\n                    />\n                    <InvalidFeedback>\n                      {validation.email.message}\n                    </InvalidFeedback>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label htmlFor=\"password\">Password:</label>\n                    <input\n                      value={password}\n                      onChange={this.onChange}\n                      type=\"password\"\n                      id=\"password\"\n                      name=\"password\"\n                      className={`form-control ${validation.password\n                        .isInvalid && \"is-invalid\"}`}\n                    />\n                    <InvalidFeedback>\n                      {validation.password.message}\n                    </InvalidFeedback>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label htmlFor=\"role\">Role:</label>\n                    <select\n                      value={role}\n                      onChange={this.onChange}\n                      name=\"role\"\n                      id=\"role\"\n                      className={`form-control ${validation.role.isInvalid &&\n                        \"is-invalid\"}`}\n                    >\n                      <option value=\"\">--User role--</option>\n                      <option value=\"member\">Member</option>\n                      <option value=\"admin\">Admin</option>\n                    </select>\n                    <InvalidFeedback>{validation.role.message}</InvalidFeedback>\n                  </div>\n\n                  <div className=\"form-group\">\n                    <Button\n                      disabled={!validation.isValid && true}\n                      buttonClass=\"btn-primary\"\n                      buttonType=\"submit\"\n                    >\n                      Create\n                    </Button>{\" \"}\n                    <Button\n                      buttonUrl=\"/admin/users\"\n                      buttonClass=\"btn-secondary\"\n                      buttonType=\"link\"\n                    >\n                      Go back\n                    </Button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nCreateUser.propTypes = {\n  createUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  message: state.users.message\n});\n\nexport default connect(\n  mapStateToProps,\n  { createUser }\n)(CreateUser);\n"]}