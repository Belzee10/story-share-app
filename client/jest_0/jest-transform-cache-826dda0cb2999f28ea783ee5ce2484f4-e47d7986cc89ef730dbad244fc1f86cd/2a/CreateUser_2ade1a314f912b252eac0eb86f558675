683a9901eb990c747b7c1f36c6c35587
"use strict";

var _interopRequireWildcard = require("/home/belzee/projects/story-share-project/story-share-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/belzee/projects/story-share-project/story-share-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _userActions = require("../../../actions/userActions");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _FormValidator = _interopRequireDefault(require("../../../utiles/FormValidator"));

var _Button = _interopRequireDefault(require("../../../components/common/Button"));

var _InvalidFeedback = _interopRequireDefault(require("../../../components/common/InvalidFeedback"));

var _jsxFileName = "/home/belzee/projects/story-share-project/story-share-app/client/src/containers/back/users/CreateUser.jsx";

class CreateUser extends _react.Component {
  constructor(props) {
    super(props);
    this.validator = new _FormValidator.default([{
      field: "fullName",
      method: "isEmpty",
      validWhen: false,
      message: "Full Name is required."
    }, {
      field: "email",
      method: "isEmpty",
      validWhen: false,
      message: "Email is required."
    }, {
      field: "email",
      method: "isEmail",
      validWhen: true,
      message: "This is not a valid email."
    }, {
      field: "password",
      method: "isEmpty",
      validWhen: false,
      message: "Password is required."
    }, {
      field: "password",
      method: "isLength",
      args: [{
        min: 3
      }],
      validWhen: true,
      message: "Password should have more than 3 characters."
    }, {
      field: "role",
      method: "isEmpty",
      validWhen: false,
      message: "Role is required."
    }]);
    this.state = {
      fullName: "",
      avatar: "avatar.png",
      email: "",
      password: "",
      role: "",
      validation: this.validator.valid()
    };
    this.submitted = false;
    this.onChange = this.onChange.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.afterSubmit = this.afterSubmit.bind(this);
  }

  onChange(e) {
    this.setState({
      [e.target.name]: e.target.value
    });
  }

  afterSubmit() {
    this.setState(prevState => {
      return {
        fullName: "",
        email: "",
        password: "",
        role: ""
      };
    });
  }

  onSubmit(e) {
    e.preventDefault();
    const validation = this.validator.validate(this.state);
    this.setState({
      validation
    });
    this.submitted = true;

    if (validation.isValid) {
      const user = {
        fullName: this.state.fullName,
        avatar: this.state.avatar,
        email: this.state.email,
        password: this.state.password,
        role: this.state.role
      };
      this.props.createUser(user);
      this.afterSubmit();
      this.submitted = false;
    }
  }

  render() {
    const _this$state = this.state,
          fullName = _this$state.fullName,
          email = _this$state.email,
          password = _this$state.password,
          role = _this$state.role;
    let validation = this.submitted ? this.validator.validate(this.state) : this.state.validation;
    return _react.default.createElement("div", {
      className: "container",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 108
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "row",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 109
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "col-lg-6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 110
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "card",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 111
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "card-body",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 112
      },
      __self: this
    }, _react.default.createElement("form", {
      onSubmit: this.onSubmit,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 113
      },
      __self: this
    }, _react.default.createElement("h2", {
      className: "mb-3",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 114
      },
      __self: this
    }, "Create User"), _react.default.createElement("div", {
      className: "form-group",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 115
      },
      __self: this
    }, _react.default.createElement("label", {
      htmlFor: "fullName",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 116
      },
      __self: this
    }, "Full Name:"), _react.default.createElement("input", {
      value: fullName,
      onChange: this.onChange,
      type: "text",
      id: "fullName",
      name: "fullName",
      className: `form-control ${validation.fullName.isInvalid && "is-invalid"}`,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 117
      },
      __self: this
    }), _react.default.createElement(_InvalidFeedback.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 126
      },
      __self: this
    }, validation.fullName.message)), _react.default.createElement("div", {
      className: "form-group",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 131
      },
      __self: this
    }, _react.default.createElement("label", {
      htmlFor: "email",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 132
      },
      __self: this
    }, "Email:"), _react.default.createElement("input", {
      value: email,
      onChange: this.onChange,
      type: "email",
      id: "email",
      name: "email",
      className: `form-control ${validation.email.isInvalid && "is-invalid"}`,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 133
      },
      __self: this
    }), _react.default.createElement(_InvalidFeedback.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 142
      },
      __self: this
    }, validation.email.message)), _react.default.createElement("div", {
      className: "form-group",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 147
      },
      __self: this
    }, _react.default.createElement("label", {
      htmlFor: "password",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 148
      },
      __self: this
    }, "Password:"), _react.default.createElement("input", {
      value: password,
      onChange: this.onChange,
      type: "password",
      id: "password",
      name: "password",
      className: `form-control ${validation.password.isInvalid && "is-invalid"}`,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 149
      },
      __self: this
    }), _react.default.createElement(_InvalidFeedback.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 158
      },
      __self: this
    }, validation.password.message)), _react.default.createElement("div", {
      className: "form-group",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 163
      },
      __self: this
    }, _react.default.createElement("label", {
      htmlFor: "role",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 164
      },
      __self: this
    }, "Role:"), _react.default.createElement("select", {
      value: role,
      onChange: this.onChange,
      name: "role",
      id: "role",
      className: `form-control ${validation.role.isInvalid && "is-invalid"}`,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 165
      },
      __self: this
    }, _react.default.createElement("option", {
      value: "",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 173
      },
      __self: this
    }, "--User role--"), _react.default.createElement("option", {
      value: "member",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 174
      },
      __self: this
    }, "Member"), _react.default.createElement("option", {
      value: "admin",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 175
      },
      __self: this
    }, "Admin")), _react.default.createElement(_InvalidFeedback.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 177
      },
      __self: this
    }, validation.role.message)), _react.default.createElement("div", {
      className: "form-group",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 180
      },
      __self: this
    }, _react.default.createElement(_Button.default, {
      disabled: !validation.isValid && true,
      buttonClass: "btn-primary",
      buttonType: "submit",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 181
      },
      __self: this
    }, "Create"), " ", _react.default.createElement(_Button.default, {
      buttonUrl: "/admin/users",
      buttonClass: "btn-secondary",
      buttonType: "link",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 188
      },
      __self: this
    }, "Go back"))))))));
  }

}

CreateUser.propTypes = {
  createUser: _propTypes.default.func.isRequired
};

const mapStateToProps = state => ({
  message: state.users.message
});

var _default = (0, _reactRedux.connect)(mapStateToProps, {
  createUser: _userActions.createUser
})(CreateUser);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,