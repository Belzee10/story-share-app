371a85eee29f1a9b8b949c23698bc00c
"use strict";

var _interopRequireDefault = require("/home/belzee/projects/story-share-project/story-share-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactRouterDom = require("react-router-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _jsxFileName = "/home/belzee/projects/story-share-project/story-share-app/client/src/components/common/Button.jsx";

const Button = props => {
  const buttonType = props.buttonType,
        buttonClass = props.buttonClass,
        buttonUrl = props.buttonUrl,
        disabled = props.disabled;
  const btnClass = `btn ${buttonClass} btn-sm`;
  const children = props.children;

  if (buttonType === "button" || buttonType === "submit") {
    return _react.default.createElement("button", {
      disabled: disabled,
      type: buttonType,
      className: btnClass,
      onClick: props.handleAction,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 12
      },
      __self: void 0
    }, children);
  } else {
    return _react.default.createElement(_reactRouterDom.Link, {
      to: buttonUrl,
      className: btnClass,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 23
      },
      __self: void 0
    }, children);
  }
};

Button.propTypes = {
  buttonClass: _propTypes.default.string.isRequired,
  buttonType: _propTypes.default.string.isRequired,
  //submit, button, link
  buttonUrl: _propTypes.default.string,
  children: _propTypes.default.string.isRequired,
  handleAction: _propTypes.default.func,
  disabled: _propTypes.default.bool
};
Button.defaultProps = {
  disabled: false
};
var _default = Button;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJ1dHRvbi5qc3giXSwibmFtZXMiOlsiQnV0dG9uIiwicHJvcHMiLCJidXR0b25UeXBlIiwiYnV0dG9uQ2xhc3MiLCJidXR0b25VcmwiLCJkaXNhYmxlZCIsImJ0bkNsYXNzIiwiY2hpbGRyZW4iLCJoYW5kbGVBY3Rpb24iLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiZnVuYyIsImJvb2wiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsTUFBTSxHQUFHQyxLQUFLLElBQUk7QUFBQSxRQUNkQyxVQURjLEdBQ21DRCxLQURuQyxDQUNkQyxVQURjO0FBQUEsUUFDRkMsV0FERSxHQUNtQ0YsS0FEbkMsQ0FDRkUsV0FERTtBQUFBLFFBQ1dDLFNBRFgsR0FDbUNILEtBRG5DLENBQ1dHLFNBRFg7QUFBQSxRQUNzQkMsUUFEdEIsR0FDbUNKLEtBRG5DLENBQ3NCSSxRQUR0QjtBQUV0QixRQUFNQyxRQUFRLEdBQUksT0FBTUgsV0FBWSxTQUFwQztBQUNBLFFBQU1JLFFBQVEsR0FBR04sS0FBSyxDQUFDTSxRQUF2Qjs7QUFFQSxNQUFJTCxVQUFVLEtBQUssUUFBZixJQUEyQkEsVUFBVSxLQUFLLFFBQTlDLEVBQXdEO0FBQ3RELFdBQ0U7QUFDRSxNQUFBLFFBQVEsRUFBRUcsUUFEWjtBQUVFLE1BQUEsSUFBSSxFQUFFSCxVQUZSO0FBR0UsTUFBQSxTQUFTLEVBQUVJLFFBSGI7QUFJRSxNQUFBLE9BQU8sRUFBRUwsS0FBSyxDQUFDTyxZQUpqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQU1HRCxRQU5ILENBREY7QUFVRCxHQVhELE1BV087QUFDTCxXQUNFLDZCQUFDLG9CQUFEO0FBQU0sTUFBQSxFQUFFLEVBQUVILFNBQVY7QUFBcUIsTUFBQSxTQUFTLEVBQUVFLFFBQWhDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQ0dDLFFBREgsQ0FERjtBQUtEO0FBQ0YsQ0F2QkQ7O0FBeUJBUCxNQUFNLENBQUNTLFNBQVAsR0FBbUI7QUFDakJOLEVBQUFBLFdBQVcsRUFBRU8sbUJBQVVDLE1BQVYsQ0FBaUJDLFVBRGI7QUFFakJWLEVBQUFBLFVBQVUsRUFBRVEsbUJBQVVDLE1BQVYsQ0FBaUJDLFVBRlo7QUFFd0I7QUFDekNSLEVBQUFBLFNBQVMsRUFBRU0sbUJBQVVDLE1BSEo7QUFJakJKLEVBQUFBLFFBQVEsRUFBRUcsbUJBQVVDLE1BQVYsQ0FBaUJDLFVBSlY7QUFLakJKLEVBQUFBLFlBQVksRUFBRUUsbUJBQVVHLElBTFA7QUFNakJSLEVBQUFBLFFBQVEsRUFBRUssbUJBQVVJO0FBTkgsQ0FBbkI7QUFTQWQsTUFBTSxDQUFDZSxZQUFQLEdBQXNCO0FBQ3BCVixFQUFBQSxRQUFRLEVBQUU7QUFEVSxDQUF0QjtlQUllTCxNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmNvbnN0IEJ1dHRvbiA9IHByb3BzID0+IHtcbiAgY29uc3QgeyBidXR0b25UeXBlLCBidXR0b25DbGFzcywgYnV0dG9uVXJsLCBkaXNhYmxlZCB9ID0gcHJvcHM7XG4gIGNvbnN0IGJ0bkNsYXNzID0gYGJ0biAke2J1dHRvbkNsYXNzfSBidG4tc21gO1xuICBjb25zdCBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuXG4gIGlmIChidXR0b25UeXBlID09PSBcImJ1dHRvblwiIHx8IGJ1dHRvblR5cGUgPT09IFwic3VibWl0XCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGJ1dHRvblxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIHR5cGU9e2J1dHRvblR5cGV9XG4gICAgICAgIGNsYXNzTmFtZT17YnRuQ2xhc3N9XG4gICAgICAgIG9uQ2xpY2s9e3Byb3BzLmhhbmRsZUFjdGlvbn1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9idXR0b24+XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFxuICAgICAgPExpbmsgdG89e2J1dHRvblVybH0gY2xhc3NOYW1lPXtidG5DbGFzc30+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvTGluaz5cbiAgICApO1xuICB9XG59O1xuXG5CdXR0b24ucHJvcFR5cGVzID0ge1xuICBidXR0b25DbGFzczogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBidXR0b25UeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsIC8vc3VibWl0LCBidXR0b24sIGxpbmtcbiAgYnV0dG9uVXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBoYW5kbGVBY3Rpb246IFByb3BUeXBlcy5mdW5jLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVkOiBmYWxzZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xuIl19